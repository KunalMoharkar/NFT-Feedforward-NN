import numpy as np

def activate(val):                      #sigmoid activation function
    z = 1/(1 + np.exp(-val)) 
    return z

def train(trainingSet,W,V,W_b,V_b,T,alpha): #function to train network

    delta = [0,0,0]
    Z = [0,0,0]
    del_j = [0,0,0]
    del_k = [0]
    Y = 0
    finalop = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
  
    num_inputs = 100
    num_hidden_nodes = 3
    num_output_nodes = 1

    for q in range(10000):
        m=0
        for X in trainingSet:

            for j in range (num_hidden_nodes):
                Zsum=0
                for i in range(num_inputs):
                    Zsum += X[i]*W[i][j]         #summation
                Zin = W_b[j] + Zsum          #Zin
                Z[j]=activate(Zin)               #Z

        
            for i in range (num_output_nodes):
                Ysum=0
                for j in range (num_hidden_nodes):
                    Ysum+=V[j][i]*Z[j]                 #summation           
                Yin = V_b[i]+Ysum               #Yin    
                Y = activate(Yin)               #Y

            # Update the weight Values

            for i in range(num_output_nodes):
                del_k[i] = (T[m]-Y)*(Y)*(1-Y)            #calculate del k 
            
            for j in range(num_hidden_nodes):
                delt = 0
                for k in range(num_output_nodes):
                    delt += del_k[k]*V[j][k]
                del_j[j]=delt               #calculate del j

            for i in range(num_hidden_nodes):
                delta[i] = del_j[i]*Z[i]*(1-Z[i])  #calulate delta j

            for i in range(num_inputs):
                for j in range(num_hidden_nodes):
                    W[i][j]=W[i][j]+alpha*delta[j]*X[i]  #update hidden layer weights

            for i in range(num_hidden_nodes):
                W_b[i]=W_b[i]+alpha*delta[i]     #update bias for hidden Layer

            for i in range(num_hidden_nodes): 
                for j in range(num_output_nodes):           #update outermost layer weights
                    V[i][j]=V[i][j]+alpha*del_k[j]*Z[i]      

            for i in range(num_output_nodes):    
                V_b[i] = V_b[i]+alpha*del_k[i]          #update bias for outermost layer
        
            finalop[m] = Y
            m=m+1

        print(f"The Target output is {T} and the output is {finalop}")


def result(X,W,V,W_b,V_b):
    Z = [0,0,0]
    num_inputs = len(X)
    num_hidden_nodes = len(W[0])

    for q in range(1000):

        for j in range (num_hidden_nodes):
            Zsum=0
            for i in range(num_inputs):
                Zsum += X[i]*W[i][j]         #summation
                Zin = W_b[j] + Zsum          #Zin
            Z[j]=activate(Zin)               #Z

        Ysum=0
        for j in range (num_hidden_nodes):
            Ysum+=V[j]*Z[j]                 #summation           
            Yin = V_b[0]+Ysum               #Yin    
            Y = activate(Yin)               #Y

        print(f"The output is {Y}")

trainingSet = [
[1,1,1,0,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,0,1,1,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,0,1,1,1,1,0,1,1,0,0,0,1,1,1,1,0,1,1,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
[1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,1,1],
[1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1],
[1,1,0,1,1,1,1,0,1,1,1,0,0,0,1,1,0,0,1,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,1,0,0,1,0,0,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,1],
[1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1],
[1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,1,1],
[1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,1,1,1],
[1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,1,1]
]

#numinputs*numhiddennodes

W = np.random.rand(100,3)

V = [[0],
     [0],
     [0]]

#numhiddennodes * num_opnodes
W_b = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]  
#numhidden_nodes
V_b = [0]          
#numoutput nodes
T = [0,1,2,0,1,2,0,1,2,0,1,2,0,1,2]          

train(trainingSet,W,V,W_b,V_b,T,0.3)

